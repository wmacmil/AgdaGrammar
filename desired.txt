
funExt (A : U) (B : A -> U) (f g : (x : A) -> B x) (p : (x : A) -> Path (B x) (f x) (g x)) : Path ((y : A) -> B y) f g = undefined

 <i> \(a : A) -> (p a) @ i


Exp> DeclUndef FunExt (ConsTele (TeleC A BaseAIdent Univ) (ConsTele (TeleC B BaseAIdent (Fun (Var A) Univ)) (ConsTele (TeleC F (ConsAIdent G BaseAIdent) (Pi (BasePTele (PTeleC (Var X) (Var A))) (App (Var B) (Var X)))) (ConsTele (TeleC P BaseAIdent (Pi (BasePTele (PTeleC (Var X) (Var A))) (Id (App (Var B) (Var X)) (App (Var F) (Var X)) (App (Var G) (Var X))))) BaseTele)))) (Id (Pi (BasePTele (PTeleC (Var Y) (Var A))) (App (Var B) (Var Y))) (Var F) (Var G))


equalNat : nat → nat → bool
equalNat zero zero = true
equalNat zero (suc n2) = false
equalNat (suc n1) zero = false
equalNat (suc n1) (suc n2) = equalNat n1 n2


equalNat : nat -> nat -> bool = split
    zero -> split@ ( nat -> bool ) with
      zero  -> true
      suc n -> false
    suc m -> split@ ( nat -> bool ) with
      zero  -> false
      suc n -> equalNat m n


DeclSplit 
	(AIdent ((113,1),"equalNat")) 
	[] 
	(Fun (Var (AIdent ((113,12),"nat"))) (Fun (Var (AIdent ((113,19),"nat"))) (Var (AIdent ((113,26),"bool"))))) 
	[OBranch 
		(AIdent ((114,5),"zero")) 
		[] 
		(NoWhere 
			(Split (Fun (Var (AIdent ((114,20),"nat"))) (Var (AIdent ((114,27),"bool")))) [OBranch (AIdent ((115,7),"zero")) [] (NoWhere (Var (AIdent ((115,16),"true")))),OBranch (AIdent ((116,7),"suc")) [AIdent ((116,11),"n")] (NoWhere (Var (AIdent ((116,16),"false"))))]))
	,
	OBranch (AIdent ((117,5),"suc")) [AIdent ((117,9),"m")] (NoWhere (Split (Fun (Var (AIdent ((117,21),"nat"))) (Var (AIdent ((117,28),"bool")))) [OBranch (AIdent ((118,7),"zero")) [] (NoWhere (Var (AIdent ((118,16),"false")))),OBranch (AIdent ((119,7),"suc")) [AIdent ((119,11),"n")] (NoWhere (App (App (Var (AIdent ((119,16),"equalNat"))) (Var (AIdent ((119,25),"m")))) (Var (AIdent ((119,27),"n")))))]))]


p "equalNat : top -> nat -> bool = split unit -> split@ ( nat -> bool ) with zero  -> true || suc n -> false" 

DeclSplit EqualNat BaseTele (Fun (Var Top) (Fun (Var Nat) (Var Bool))) (BaseBranch (OBranch Unit BaseAIdent (NoWhere 
  (Split 
    (Fun (Var Nat) (Var Bool)) 
    (ConsBranch 
      (OBranch Zero BaseAIdent (NoWhere (Var True))) 
      (BaseBranch 
        (OBranch Suc (ConsAIdent N BaseAIdent) (NoWhere (Var False))))))
)))


p "equalNat : top -> nat -> bool = split unit -> split@ ( nat -> bool ) with zero  -> true || suc n -> false" 

DeclSplit EqualNat BaseTele (Fun (Var Top) (Fun (Var Nat) (Var Bool))) 
  (ConsBranch 
    (OBranch Unit BaseAIdent (NoWhere (Split (Fun (Var Nat) (Var Bool)) (BaseBranch (OBranch Zero BaseAIdent (NoWhere (Var True))))))) 
    (BaseBranch (OBranch Suc (ConsAIdent N BaseAIdent) (NoWhere (Var False)))))





data Vec (A : Set) : Nat -> Set where
  [] : Vec A 0
  Cons : A -> Vec A n -> Vec a (n+1)

data Bool : Set where
  true : Bool
  false : Bool

caseBool ( x : U ) ( y z : x ) : bool -> U 
caseBool false = y 
caseBool true = z

