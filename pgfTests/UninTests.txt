is it the case that 3 is prime and 4 is odd
is it the case that 3 is prime or 4 is odd
is it the case that 3 is prime
is it the case that 3 is prime
is it the case that it is not the case that 3 is prime
is it the case that it is not the case that 3 is prime
is it the case that the sum of 3 , 4 and 5 is prime and 4 is odd
is it the case that the sum of 3 , 4 and 5 is prime 
is it the case that the sum of 3 , 4 and 10 is prime and 3 is odd

is it the case that the sum of 3 and the sum of 4 and 5 is prime and 4 is odd

is it the case that the sum of 3 and the sum of 4 and 10 is prime and 9999 is odd

is it the case that 3 is prime and odd 
is it the case that 3 is prime , odd and even
is it the case that 3 is prime , odd or even
is it the case that 3 is prime , odd and even or odd
is it the case that if 3 is prime , odd and even then 4 is prime and even

is it the case that if the sum of 3 , 4 and 5 is prime , odd and even then 4 is prime and even

is it the case that 3 is prime and odd or 4 is even or odd

is it the case that 4 is prime , 5 is even or 6 is odd



i'm wondering why this comes up with no parse?
is it the case that 4 is prime , if 4 is odd then 5 is even or 6 is odd

is it the case that 4 is prime , 6 is odd or if 4 is odd then 5 is even

is it the case that 3 is prime , if 4 is odd then 5 is even or 6 is even

-----

is it the case that 4 is prime , 5 is even or 6 is odd and 7 is even 




------


is it the case that 4 is prime , 5 is even or 6 is odd 
--works

is it the case that 4 is prime , 5 is even or if 6 is odd then 7 is even
--doesnt work

is it the case that 5 is even or if 6 is odd then 7 is even
--works
is it the case that 5 is even or if 6 is odd then 7 is even or odd

-----

p "is it the case that 4 is prime , 5 is even or 6 is odd and 7 is even" 

(LstProp Or (ConsProp (IsNumProp Prime (NatObj (Number 4))) (BaseProp (IsNumProp Even (NatObj (Number 5))) (PConj And (IsNumProp Odd (NatObj (Number 6))) (IsNumProp Even (NatObj (Number 7)))))))

sooooo the system inherently avoids ambiguous parses
  l (LstProp Or (ConsProp (IsNumProp Prime (NatObj (Number 4))) (BaseProp (IsNumProp Even (NatObj (Number 5))) (PConj And (IsNumProp Odd (NatObj (Number 6))) (IsNumProp Even (NatObj (Number 7)))))))
  at least one of these holds : \item 4 is prime , 5 is even \item 6 is odd and 7 is even

i don't get why it's linearizing like this...

(PConj And (IsNumProp Odd (NatObj (Number 6))) (IsNumProp Even (NatObj (Number 7))))

p -cat=Prop "6 is odd and 7 is even"
LstProp And (BaseProp (IsNumProp Odd (NatObj (Number 6))) (IsNumProp Even (NatObj (Number 7))))
PConj And (IsNumProp Odd (NatObj (Number 6))) (IsNumProp Even (NatObj (Number 7)))

-- that by eliminating the ambiguity at the concrete level, one makes it impossible to form certain phrases
p "4 is even , 3 is even and 5 is even or 6 is odd"
PConj COr (PConjs CAnd (ConsProp (PAtom (APred1 Even (IInt 4))) (BaseProp (PAtom (APred1 Even (IInt 3))) (PAtom (APred1 Even (IInt 5)))))) (PAtom (APred1 Odd (IInt 6)))




